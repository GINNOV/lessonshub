// file: prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid())
  name                      String?
  email                     String    @unique
  hashedPassword            String?
  emailVerified             DateTime?
  image                     String?
  timeZone                  String?
  weeklySummaryOptOut       Boolean   @default(false)
  gender                    Gender    @default(BINARY)
  role                      Role      @default(STUDENT)
  lastSeen                  DateTime?
  impersonatedById          String?   @unique
  isPaying                  Boolean   @default(false)
  isSuspended               Boolean   @default(false)
  isTakingBreak             Boolean   @default(false)
  lastPaymentReminderSentAt DateTime?
  
  // For students, the teachers they are assigned to.
  teachers                  TeachersForStudent[] @relation("StudentTeachers")
  // For teachers, the students they have assigned.
  students                  TeachersForStudent[] @relation("TeacherStudents")

  // Referral Program Fields
  referralCode              String?   @unique
  referrerId                String?
  referrer                  User?     @relation("UserReferrals", fields: [referrerId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  referrals                 User[]    @relation("UserReferrals")

  impersonatedBy            User?     @relation("Impersonation", fields: [impersonatedById], references: [id], onDelete: Restrict, onUpdate: Restrict)
  impersonating             User?     @relation("Impersonation")

  accounts                  Account[]
  sessions                  Session[]
  lessons                   Lesson[]
  assignments               Assignment[]
  classes                   Class[]
  defaultLessonPrice        Decimal?
  defaultLessonPreview      String?   @db.Text
  defaultLessonNotes        String?   @db.Text
  defaultLessonInstructions String?   @db.Text
  teacherBio                String?   @db.Text

  // Customizable dashboard fields
  progressCardTitle         String?   @default("My Progress")
  progressCardBody          String?   @default("Total value from all graded lessons.")
  progressCardLinkText      String?   @default("Invest in your future - watch now")
  progressCardLinkUrl       String?   @default("https://www.youtube.com/embed/kd8zMU3kd0s?si=j0X6hdJqhcXDYn3g&amp;controls=0")
  assignmentSummaryFooter   String?
}

model TeachersForStudent {
  studentId String
  student   User   @relation("StudentTeachers", fields: [studentId], references: [id], onDelete: Cascade)
  teacherId String
  teacher   User   @relation("TeacherStudents", fields: [teacherId], references: [id], onDelete: Cascade)
  classId   String?
  class     Class? @relation(fields: [classId], references: [id], onDelete: SetNull)

  @@id([studentId, teacherId])
}

model Class {
  id        String   @id @default(cuid())
  name      String
  isActive  Boolean  @default(true)
  teacherId String
  teacher   User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  students  TeachersForStudent[]
  createdAt DateTime @default(now())
}

model Lesson {
  id                        String                 @id @default(cuid())
  title                     String
  type                      LessonType             @default(STANDARD)
  lesson_preview            String?
  assignment_text           String?
  questions                 Json?
  assignment_image_url      String?
  soundcloud_url            String?
  context_text              String?
  attachment_url            String?
  notes                     String?
  assignment_notification   AssignmentNotification @default(NOT_ASSIGNED)
  scheduled_assignment_date DateTime?
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  teacherId                 String?
  price                     Decimal                @default(0)
  public_share_id           String?
  teacher                   User?                  @relation(fields: [teacherId], references: [id], onDelete: SetNull)
  assignments               Assignment[]
  flashcards                Flashcard[]
  multiChoiceQuestions      MultiChoiceQuestion[]
}

model Flashcard {
  id                 String  @id @default(cuid())
  term               String
  definition         String
  termImageUrl       String? // Replaces imageUrl
  definitionImageUrl String? // New field for the back of the card
  lessonId           String
  lesson             Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model MultiChoiceQuestion {
  id       String              @id @default(cuid())
  question String
  lessonId String
  options  MultiChoiceOption[]
  lesson   Lesson              @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model MultiChoiceOption {
  id         String              @id @default(cuid())
  text       String
  isCorrect  Boolean             @default(false)
  questionId String
  question   MultiChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Assignment {
  id                  String           @id @default(cuid())
  assignedAt          DateTime         @default(now())
  startDate           DateTime         @default(now())
  deadline            DateTime
  status              AssignmentStatus @default(PENDING)
  score               Int?
  gradedAt            DateTime?
  studentNotes        String?
  rating              Int?
  answers             Json?
  teacherComments     String?
  teacherAnswerComments Json?
  reminderSentAt      DateTime?
  milestoneNotified   Boolean          @default(false)
  notifyOnStartDate   Boolean          @default(true) // New field for scheduled notifications
  lessonId            String
  studentId           String
  lesson              Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student             User             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([lessonId, studentId])
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  body        String
  buttonColor String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  BINARY
}

enum LessonType {
  STANDARD
  FLASHCARD
  MULTI_CHOICE
  LEARNING_SESSION
}

enum AssignmentNotification {
  NOT_ASSIGNED
  ASSIGN_AND_NOTIFY
  ASSIGN_WITHOUT_NOTIFICATION
  ASSIGN_ON_DATE
}

enum AssignmentStatus {
  PENDING
  COMPLETED
  GRADED
  FAILED
}
