// file: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Enum for user roles as per the PRD
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum AssignmentNotification {
  NOT_ASSIGNED
  ASSIGN_AND_NOTIFY
  ASSIGN_WITHOUT_NOTIFICATION
}

// Main User model
model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  hashedPassword        String?
  emailVerified         DateTime?
  image                 String?
  role                  Role      @default(STUDENT)
  lastSeen              DateTime?
  impersonatedBy        User?     @relation("Impersonation", fields: [impersonatedById], references: [id], onDelete: Restrict, onUpdate: Restrict)
  impersonatedById      String?   @unique
  impersonating         User?     @relation("Impersonation")
  accounts              Account[]
  sessions              Session[]
  lessons               Lesson[]
  assignments           Assignment[]
}

// Model for Lessons
model Lesson {
  id                   String    @id @default(cuid())
  title                String
  lesson_preview       String?   @db.Text
  assignment_text      String    @db.Text
  questions            Json?
  assignment_image_url String?
  context_text         String?   @db.Text
  attachment_url       String?
  notes                String?
  assignment_notification AssignmentNotification @default(NOT_ASSIGNED)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  teacherId String
  teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  assignments Assignment[]
}

enum AssignmentStatus {
  PENDING
  COMPLETED
  GRADED
  FAILED
}

model Assignment {
  id              String           @id @default(cuid())
  assignedAt      DateTime         @default(now())
  deadline        DateTime
  status          AssignmentStatus @default(PENDING)
  score           Int?
  gradedAt        DateTime?
  studentNotes    String?          @db.Text
  answers         Json?
  teacherComments String?

  lessonId  String
  lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  studentId String
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([lessonId, studentId]) // A student can only be assigned the same lesson once
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}