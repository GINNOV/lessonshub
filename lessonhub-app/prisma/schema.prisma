generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String       @unique
  hashedPassword   String?
  emailVerified    DateTime?
  image            String?
  role             Role         @default(STUDENT)
  lastSeen         DateTime?
  impersonatedById String?      @unique
  impersonatedBy   User?        @relation("Impersonation", fields: [impersonatedById], references: [id], onDelete: Restrict, onUpdate: Restrict)
  impersonating    User?        @relation("Impersonation")
  accounts         Account[]
  sessions         Session[]
  lessons          Lesson[]
  assignments      Assignment[]
}

enum LessonType {
  STANDARD
  VIDEO
  QUIZ
  ASSIGNMENT
  FLASHCARD
  MULTI_CHOICE
}

model Flashcard {
  id          String  @id @default(cuid())
  term        String  // Renamed from 'front'
  definition  String  // Renamed from 'back'
  imageUrl    String? // Added this new optional field

  lessonId    String
  lesson      Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Lesson {
  id                        String                 @id @default(cuid())
  title                     String
  lesson_preview            String?
  assignment_text           String?
  questions                 Json?
  assignment_image_url      String?
  context_text              String?
  attachment_url            String?
  notes                     String?
  savedValue                Int?
  type                      LessonType  @default(STANDARD)
  soundcloud_url            String?
  assignment_notification   AssignmentNotification @default(NOT_ASSIGNED)
  scheduled_assignment_date DateTime?
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  teacherId                 String
  teacher                   User                   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  assignments               Assignment[]
  flashcards                Flashcard[]
  multiChoiceQuestions      MultiChoiceQuestion[]
}

model Assignment {
  id              String           @id @default(cuid())
  assignedAt      DateTime         @default(now())
  deadline        DateTime
  status          AssignmentStatus @default(PENDING)
  score           Int?
  gradedAt        DateTime?
  studentNotes    String?
  answers         Json?
  teacherComments String?
  lessonId        String
  studentId       String
  lesson          Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student         User             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([lessonId, studentId])
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  body        String
  buttonColor String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model MultiChoiceQuestion {
  id        String             @id @default(cuid())
  question  String
  options   MultiChoiceOption[]

  lessonId  String
  lesson    Lesson             @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model MultiChoiceOption {
  id          String              @id @default(cuid())
  text        String
  isCorrect   Boolean             @default(false)

  questionId  String
  question    MultiChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

enum AssignmentNotification {
  NOT_ASSIGNED
  ASSIGN_AND_NOTIFY
  ASSIGN_WITHOUT_NOTIFICATION
  ASSIGN_ON_DATE
}

enum AssignmentStatus {
  PENDING
  COMPLETED
  GRADED
  FAILED
}
