// file: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Enum for user roles based on src/auth.ts and admin pages
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

// Enum for lesson types based on various components and API routes
enum LessonType {
  STANDARD
  FLASHCARD
  MULTI_CHOICE
  LEARNING_SESSION
}

// Enum for assignment notifications based on LessonForm.tsx
enum AssignmentNotification {
  NOT_ASSIGNED
  ASSIGN_AND_NOTIFY
  ASSIGN_WITHOUT_NOTIFICATION
  ASSIGN_ON_DATE
}

// Enum for assignment status based on various components
enum AssignmentStatus {
  PENDING
  COMPLETED
  GRADED
  FAILED
}

// Main User model, derived from auth.ts, adminActions.ts, and ProfileForm.tsx
model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  hashedPassword   String?
  emailVerified    DateTime?
  image            String?
  role             Role      @default(STUDENT)
  lastSeen         DateTime?

  // Self-relation for impersonation, from adminActions.ts
  impersonatedBy   User?     @relation("Impersonation", fields: [impersonatedById], references: [id], onDelete: Restrict, onUpdate: Restrict)
  impersonatedById String?   @unique
  impersonating    User?     @relation("Impersonation")

  // Relations to other models
  accounts         Account[]
  sessions         Session[]
  lessons          Lesson[]
  assignments      Assignment[]
}

// Model for Lessons, combining fields from all lesson-related components and APIs
model Lesson {
  id                        String    @id @default(cuid())
  title                     String
  type                      LessonType @default(STANDARD)
  
  lesson_preview            String?   @db.Text
  assignment_text           String?   @db.Text
  questions                 Json?
  assignment_image_url      String?
  soundcloud_url            String?
  context_text              String?   @db.Text
  attachment_url            String?
  
  notes                     String?

  assignment_notification   AssignmentNotification @default(NOT_ASSIGNED)
  scheduled_assignment_date DateTime?

  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  teacherId                 String?   
  teacher                   User?     @relation(fields: [teacherId], references: [id], onDelete: SetNull)
  
  assignments               Assignment[]
  flashcards                Flashcard[]
  multiChoiceQuestions      MultiChoiceQuestion[]
}

// Relational model for Flashcards, derived from FlashcardCreator.tsx
model Flashcard {
  id          String  @id @default(cuid())
  term        String
  definition  String
  imageUrl    String?

  // Relation to Lesson
  lessonId    String
  lesson      Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

// Relational model for Multi-Choice Questions, derived from MultiChoiceCreator.tsx
model MultiChoiceQuestion {
  id        String             @id @default(cuid())
  question  String
  
  // Relations
  options   MultiChoiceOption[]
  lessonId  String
  lesson    Lesson             @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

// Relational model for Multi-Choice Options
model MultiChoiceOption {
  id          String              @id @default(cuid())
  text        String
  isCorrect   Boolean             @default(false)
  
  // Relation to Question
  questionId  String
  question    MultiChoiceQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

// Model for Assignments, derived from grading components and actions
model Assignment {
  id              String           @id @default(cuid())
  assignedAt      DateTime         @default(now())
  deadline        DateTime
  status          AssignmentStatus @default(PENDING)
  score           Int?
  gradedAt        DateTime?
  studentNotes    String?          @db.Text
  answers         Json? // For storing answers from various lesson types
  teacherComments String?

  // Relations
  lessonId        String
  lesson          Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  studentId       String
  student         User             @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([lessonId, studentId])
}

// Model for Email Templates, from adminActions.ts
model EmailTemplate {
  id          String  @id @default(cuid())
  name        String  @unique
  subject     String
  body        String  @db.Text
  buttonColor String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// --- NextAuth.js Required Models ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}